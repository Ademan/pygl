from pygl.texture import _gen_texture()

from pygl import texture

#Generated by gen_constants.sh /usr/include/GL/gl.h | grep CUBE
TEXTURE_CUBE_MAP = c_uint(0x8513)
TEXTURE_BINDING_CUBE_MAP = c_uint(0x8514)
TEXTURE_CUBE_MAP_POSITIVE_X = c_uint(0x8515)
TEXTURE_CUBE_MAP_NEGATIVE_X = c_uint(0x8516)
TEXTURE_CUBE_MAP_POSITIVE_Y = c_uint(0x8517)
TEXTURE_CUBE_MAP_NEGATIVE_Y = c_uint(0x8518)
TEXTURE_CUBE_MAP_POSITIVE_Z = c_uint(0x8519)
TEXTURE_CUBE_MAP_NEGATIVE_Z = c_uint(0x851A)
PROXY_TEXTURE_CUBE_MAP = c_uint(0x851B)
MAX_CUBE_MAP_TEXTURE_SIZE = c_uint(0x851C)

#TODO: direct state access path?

class CubeFace(object):
    def __init__(self, face):
        self.face = face
    def image(self, width, height, data, level=0, storage=RGBA, format=RGBA, border=0):
        _gl.glTexImage2D(self.face, c_int(level),
                         c_uint(storage),
                         c_uint(width), c_uint(height),
                         c_int(border),
                         c_uint(format), GL_BYTES, #FIXME: don't hardcore bytes 
                         bytestream(data)) #FIXME: make pointer out of data

_sign = ["positive", "negative"]
_axis = ["x", "y", "z"]
_cube_attrs = ["%s_%c" % (sign, axis)
               for (sign, axis) in product(_sign, _axis)]

_attr_enum  = zip(_cube_attrs,
                  [TEXTURE_CUBE_MAP_POSITIVE_X + i
                   for i in xrange(0, 6)])

class CubeMap(texture.Texture):
    def __init__(self):
        self.texture = _gen_texture()
        self.unit = None
        for face in _cube_attrs:
            setattr(self, face, CubeFace(_attr_enum[face])) #FIXME: face to face enum
